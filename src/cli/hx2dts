#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var cli = require('commander');
var hx2dts = require('../hx2dts');
var utils = require('../utils');

// Command line interface
//
cli.version(require('../../package.json').version);
cli.usage('<file>');
cli.option('-h, --haxe [haxe]', 'Directory of existing haxe files');
cli.option('-d, --destination [destination]', 'Destination directory where final d.ts files will be put');
cli.parse(process.argv);

// Path parsing
var parsePath = function(input) {
    if (input == '-') return '-';
    var output;
    if (!(input != null)) {
        return process.cwd();
    }
    output = path.normalize(input);
    if (output.length === 0) {
        return process.cwd();
    }
    if (output.charAt(0) !== '/') {
        output = path.normalize(process.cwd() + '/./' + output);
    }
    if (output.length > 1 && output.charAt(output.length - 1) === '/') {
        return output.substr(0, output.length - 1);
    }
    return output;
};

if ((!cli.args || cli.args.length == 0) && !(cli.haxe && cli.destination)) {
    cli.outputHelp();
    return;
}

// Compile one file
if (!(cli.haxe && cli.destination)) {

    // Get full path
    var fullPath = parsePath(cli.args[0]);

    // Get source code
    var hxCode = String(fs.readFileSync(fullPath));

    // Get module name
    var moduleName = fullPath.substring(fullPath.lastIndexOf('/')+1, fullPath.length-3);

    // Convert
    var parser = new hx2dts.HXParser(hxCode, moduleName);
    var dumper = new hx2dts.DTSDumper(parser.getInfo());
    process.stdout.write(dumper.getOutput());
}
else {

    // Get hx path
    var hxPath = parsePath(cli.haxe);

    // Get dts path
    var dtsPath = parsePath(cli.destination);

    // Compile directories
    utils.convertDirectory(hxPath, dtsPath, true);
}
